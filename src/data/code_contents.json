{"Climbing Stairs": {"id": 1327401755, "code": "class Solution(object):\n    def climbStairs(self, n):\n        if n <= 2:\n            return n\n        return self.climbStairs(n - 1) + self.climbStairs(n - 2)\n\n\n"}, "Sqrt(x)": {"id": 1324579724, "code": "class Solution(object):\n    def mySqrt(self, x):\n        left = 0\n        right = x\n\n        while right - left > 1:\n            mid = (right + left) // 2\n            square = mid * mid\n\n            if square > x:\n                right = mid\n            \n            elif square < x:\n                left = mid \n\n            elif square == x:\n                return mid\n\n        return left"}, "Add Binary": {"id": 1323524378, "code": "class Solution(object):\n    def addBinary(self,a,b):\n        result = \"\"\n        carry = 0\n\n        if len(a) > len(b):\n            b = \"0\"*(len(a) - len(b)) + b\n        else:\n            a = \"0\"*(len(b) - len(a)) + a\n\n        for i in range(len(a)-1, -1, -1):\n            current_sum = int(a[i]) + int(b[i]) + carry\n            \n            if current_sum == 0:\n                result = \"0\" + result\n                carry = 0\n            \n            elif current_sum == 1:\n                result = \"1\" + result\n                carry = 0\n\n            elif current_sum == 2:\n                result = \"0\" + result\n                carry = 1\n\n            else:\n                result = \"1\" + result\n                carry = 1\n\n        if carry == 1:\n            result = \"1\" + result\n\n        return result"}, "Plus One": {"id": 1321254079, "code": "class Solution(object):\n    def plusOne(self, digits):\n        value = \"\"\n        newnum = []\n\n        for i in digits:\n            value += str(i)\n        \n        val_1 = str(int(value) + 1)\n        \n        for i in val_1:\n            newnum.append(int(i))\n        \n        return newnum\n        "}, "Search Insert Position": {"id": 1321233503, "code": "class Solution(object):\n    def searchInsert(self, nums, target):\n        left = 0\n        right = len(nums) - 1\n\n        while right >= left:\n            mid = (left + right) // 2\n\n            if nums[mid] == target:\n                return mid\n            \n            elif nums[mid] < target:\n                left = mid + 1\n            \n            elif nums[mid] > target:\n                right = mid - 1\n        \n        return left\n        "}, "Find the Index of the First Occurrence in a String": {"id": 1321218603, "code": "class Solution(object):\n    def strStr(self, haystack, needle):\n        if needle not in haystack:\n            return -1\n\n        return haystack.index(needle)\n        "}, "Remove Duplicates from Sorted Array": {"id": 1321036976, "code": "class Solution(object):\n    def removeDuplicates(self, nums):\n        nums[:] = (set(nums))\n        k = len(nums)\n        return k\n        \n# 'set' removes duplicates from a list\n# 'sorted' sorts a list in order\n# nums[:] ensures that any references to the original list nums will see the updated contents, unlike nums = sorted(set(nums)), which would create a new list object."}, "Roman to Integer": {"id": 1317929562, "code": "class Solution(object):\n    def romanToInt(self, romNum):\n        romInt = {'I':1, 'V':5, 'X':10, 'L':50, 'C':100, 'D':500, 'M':1000} \n        intNum = 0\n        prevNum = romInt[romNum[0]]\n\n        for char in romNum:\n            if romInt[char] > prevNum:\n                intNum += romInt[char] - 2*prevNum\n            else:\n                intNum += romInt[char]\n\n            prevNum = romInt[char]\n        return intNum"}, "Palindrome Number": {"id": 1317900471, "code": "class Solution(object):\n    def isPalindrome(self, x):\n        x = str(x)\n        if x == x[::-1]:\n            return True\n        return False\n"}, "Length of Last Word": {"id": 1317021722, "code": "class Solution(object):\n    def lengthOfLastWord(self, string):\n\n        words = string.split() # Auto splits string into list of words and removes trailing spaces\n        if not words: # If words list is empty\n            return 0\n        return len(words[-1])\n        "}}